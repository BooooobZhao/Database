dbClearResult(ps)
# credit destination account
sql <- "UPDATE invoice_items
SET UnitPrice = UnitPrice + ?
WHERE InvoiceLineId = ?"
ps <- dbSendStatement(dbcon, sql,
params = list(amount, trackitemsid))
if (dbGetRowsAffected(ps) < 1)
txnFailed = TRUE
dbClearResult(ps)
# add accounting transaction to log
sql <- "INSERT INTO journal
(TrackId,amount,change_date)
VALUES (?, ?, date('now'))"
ps <- dbSendStatement(dbcon, sql,
params = list(tracksid, amount))
if (dbGetRowsAffected(ps) < 1)
txnFailed = TRUE
dbClearResult(ps)
# Check if the price is greater than 0
sql <- "SELECT UnitPrice FROM tracks
WHERE TrackId = ?"
ps <- dbSendStatement(dbcon, sql, params = tracksid)
if (ps < 0)
txnFailed = TRUE
sql <- "SELECT UnitPrice FROM invoice_items
WHERE InvoiceLineId = ?"
ps <- dbSendStatement(dbcon, sql, params = trackitemsid)
if (ps < 0)
txnFailed = TRUE
# commit transaction if no failure, otherwise rollback
if (txnFailed == TRUE)
dbExecute(dbcon, "ROLLBACK TRANSACTION")
else
dbExecute(dbcon, "COMMIT TRANSACTION")
# return status; TRUE if successful; FALSE if failed
return (!txnFailed)
}
dbGetQuery(dbcon, "SELECT TrackId, Name, UnitPrice FROM tracks WHERE TrackId = 1")
dbGetQuery(dbcon, "SELECT InvoiceLineId, TrackId, UnitPrice FROM invoice_items WHERE TrackId = 1")
tracksid <- 1
trackitemsid <- 579
amount <- 1
status <- doTransfer(dbcon, tracksid, trackitemsid, amount)
dbDisconnect(dbcon)
library(RSQLite)
fpath = ""
dbfile = "MediaDB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
doTransfer <- function (dbcon, tracksid, trackitemsid, amount)
{
txnFailed = FALSE
dbExecute(dbcon, "BEGIN TRANSACTION")
# Change the price in tracks table
sql <- "UPDATE tracks
SET UnitPrice = UnitPrice + ?
WHERE TrackId = ?"
ps <- dbSendStatement(dbcon, sql,
params = list(amount, tracksid))
if (dbGetRowsAffected(ps) < 1)
txnFailed = TRUE
dbClearResult(ps)
# credit destination account
sql <- "UPDATE invoice_items
SET UnitPrice = UnitPrice + ?
WHERE InvoiceLineId = ?"
ps <- dbSendStatement(dbcon, sql,
params = list(amount, trackitemsid))
if (dbGetRowsAffected(ps) < 1)
txnFailed = TRUE
dbClearResult(ps)
# add accounting transaction to log
sql <- "INSERT INTO journal
(TrackId,amount,change_date)
VALUES (?, ?, date('now'))"
ps <- dbSendStatement(dbcon, sql,
params = list(tracksid, amount))
if (dbGetRowsAffected(ps) < 1)
txnFailed = TRUE
dbClearResult(ps)
# Check if the price is greater than 0
sql <- "SELECT UnitPrice FROM tracks
WHERE TrackId = ?"
ps <- dbSendStatement(dbcon, sql, params = tracksid)
if (ps < 0)
txnFailed = TRUE
sql <- "SELECT UnitPrice FROM invoice_items
WHERE InvoiceLineId = ?"
ps <- dbSendStatement(dbcon, sql, params = trackitemsid)
if (ps < 0)
txnFailed = TRUE
# commit transaction if no failure, otherwise rollback
if (txnFailed == TRUE)
dbExecute(dbcon, "ROLLBACK TRANSACTION")
else
dbExecute(dbcon, "COMMIT TRANSACTION")
# return status; TRUE if successful; FALSE if failed
return (!txnFailed)
}
dbGetQuery(dbcon, "SELECT TrackId, Name, UnitPrice FROM tracks WHERE TrackId = 1")
dbGetQuery(dbcon, "SELECT InvoiceLineId, TrackId, UnitPrice FROM invoice_items WHERE TrackId = 1")
tracksid <- 1
trackitemsid <- 579
amount <- 1
status <- doTransfer(dbcon, tracksid, trackitemsid, amount)
dbExecute(dbcon, "ROLLBACK TRANSACTION")
dbGetQuery(dbcon, "SELECT TrackId, Name, UnitPrice FROM tracks WHERE TrackId = 1")
dbGetQuery(dbcon, "SELECT InvoiceLineId, TrackId, UnitPrice FROM invoice_items WHERE TrackId = 1")
tracksid <- 1
trackitemsid <- 579
amount <- 1
status <- doTransfer(dbcon, tracksid, trackitemsid, amount)
library(RSQLite)
fpath = ""
dbfile = "MediaDB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
doTransfer <- function (dbcon, tracksid, trackitemsid, amount)
{
txnFailed = FALSE
dbExecute(dbcon, "BEGIN TRANSACTION")
# Change the price in tracks table
sql <- "UPDATE tracks
SET UnitPrice = UnitPrice + ?
WHERE TrackId = ?"
ps <- dbSendStatement(dbcon, sql,
params = list(amount, tracksid))
if (dbGetRowsAffected(ps) < 1)
txnFailed = TRUE
dbClearResult(ps)
# credit destination account
sql <- "UPDATE invoice_items
SET UnitPrice = UnitPrice + ?
WHERE InvoiceLineId = ?"
ps <- dbSendStatement(dbcon, sql,
params = list(amount, trackitemsid))
if (dbGetRowsAffected(ps) < 1)
txnFailed = TRUE
dbClearResult(ps)
# add accounting transaction to log
sql <- "INSERT INTO journal
(TrackId,amount,change_date)
VALUES (?, ?, date('now'))"
ps <- dbSendStatement(dbcon, sql,
params = list(tracksid, amount))
if (dbGetRowsAffected(ps) < 1)
txnFailed = TRUE
dbClearResult(ps)
# Check if the price is greater than 0
sql <- "SELECT UnitPrice FROM tracks
WHERE TrackId = ?"
ps <- dbSendStatement(dbcon, sql, params = tracksid)
if (ps < 0)
txnFailed = TRUE
sql <- "SELECT UnitPrice FROM invoice_items
WHERE InvoiceLineId = ?"
ps <- dbSendStatement(dbcon, sql, params = trackitemsid)
if (ps < 0)
txnFailed = TRUE
# commit transaction if no failure, otherwise rollback
if (txnFailed == TRUE)
dbExecute(dbcon, "ROLLBACK TRANSACTION")
else
dbExecute(dbcon, "COMMIT TRANSACTION")
# return status; TRUE if successful; FALSE if failed
return (!txnFailed)
}
dbGetQuery(dbcon, "SELECT TrackId, Name, UnitPrice FROM tracks WHERE TrackId = 1")
dbGetQuery(dbcon, "SELECT InvoiceLineId, TrackId, UnitPrice FROM invoice_items WHERE TrackId = 1")
tracksid <- 1
trackitemsid <- 579
amount <- 1
status <- doTransfer(dbcon, tracksid, trackitemsid, amount)
dbExecute(dbcon, "ROLLBACK TRANSACTION")
dbDisconnect(dbcon)
library(RSQLite)
fpath = ""
dbfile = "MediaDB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
doTransfer <- function (dbcon, tracksid, trackitemsid, amount)
{
txnFailed = FALSE
dbExecute(dbcon, "BEGIN TRANSACTION")
# Change the price in tracks table
sql <- "UPDATE tracks
SET UnitPrice = UnitPrice + ?
WHERE TrackId = ?"
ps <- dbSendStatement(dbcon, sql,
params = list(amount, tracksid))
if (dbGetRowsAffected(ps) < 1)
txnFailed = TRUE
dbClearResult(ps)
# credit destination account
sql <- "UPDATE invoice_items
SET UnitPrice = UnitPrice + ?
WHERE InvoiceLineId = ?"
ps <- dbSendStatement(dbcon, sql,
params = list(amount, trackitemsid))
if (dbGetRowsAffected(ps) < 1)
txnFailed = TRUE
dbClearResult(ps)
# add accounting transaction to log
sql <- "INSERT INTO journal
(TrackId,amount,change_date)
VALUES (?, ?, date('now'))"
ps <- dbSendStatement(dbcon, sql,
params = list(tracksid, amount))
if (dbGetRowsAffected(ps) < 1)
txnFailed = TRUE
dbClearResult(ps)
# Check if the price is greater than 0
sql <- "SELECT UnitPrice FROM tracks
WHERE TrackId = ?"
ps <- dbSendStatement(dbcon, sql, params = tracksid)
for(each in ps) {
if (each < 0)
txnFailed = TRUE
}
sql <- "SELECT UnitPrice FROM invoice_items
WHERE InvoiceLineId = ?"
for(each in ps) {
if (each < 0)
txnFailed = TRUE
}
# commit transaction if no failure, otherwise rollback
if (txnFailed == TRUE)
dbExecute(dbcon, "ROLLBACK TRANSACTION")
else
dbExecute(dbcon, "COMMIT TRANSACTION")
# return status; TRUE if successful; FALSE if failed
return (!txnFailed)
}
dbGetQuery(dbcon, "SELECT TrackId, Name, UnitPrice FROM tracks WHERE TrackId = 1")
dbGetQuery(dbcon, "SELECT InvoiceLineId, TrackId, UnitPrice FROM invoice_items WHERE TrackId = 1")
tracksid <- 1
trackitemsid <- 579
amount <- 1
status <- doTransfer(dbcon, tracksid, trackitemsid, amount)
doTransfer <- function (dbcon, tracksid, trackitemsid, amount)
{
txnFailed = FALSE
dbExecute(dbcon, "BEGIN TRANSACTION")
# Change the price in tracks table
sql <- "UPDATE tracks
SET UnitPrice = UnitPrice + ?
WHERE TrackId = ?"
ps <- dbSendStatement(dbcon, sql,
params = list(amount, tracksid))
if (dbGetRowsAffected(ps) < 1)
txnFailed = TRUE
dbClearResult(ps)
# credit destination account
sql <- "UPDATE invoice_items
SET UnitPrice = UnitPrice + ?
WHERE InvoiceLineId = ?"
ps <- dbSendStatement(dbcon, sql,
params = list(amount, trackitemsid))
if (dbGetRowsAffected(ps) < 1)
txnFailed = TRUE
dbClearResult(ps)
# add accounting transaction to log
sql <- "INSERT INTO journal
(TrackId,amount,change_date)
VALUES (?, ?, date('now'))"
ps <- dbSendStatement(dbcon, sql,
params = list(tracksid, amount))
if (dbGetRowsAffected(ps) < 1)
txnFailed = TRUE
dbClearResult(ps)
# Check if the price is greater than 0
sql <- "SELECT UnitPrice FROM tracks
WHERE TrackId = ?"
ps <- dbFetch(dbcon, sql, params = tracksid)
for(each in ps) {
if (each < 0)
txnFailed = TRUE
}
sql <- "SELECT UnitPrice FROM invoice_items
WHERE InvoiceLineId = ?"
ps <- dbFetch(dbcon, sql, params = trackitemsid)
for(each in ps) {
if (each < 0)
txnFailed = TRUE
}
# commit transaction if no failure, otherwise rollback
if (txnFailed == TRUE)
dbExecute(dbcon, "ROLLBACK TRANSACTION")
else
dbExecute(dbcon, "COMMIT TRANSACTION")
# return status; TRUE if successful; FALSE if failed
return (!txnFailed)
}
tracksid <- 1
trackitemsid <- 579
amount <- 1
status <- doTransfer(dbcon, tracksid, trackitemsid, amount)
dbExecute(dbcon, "ROLLBACK TRANSACTION")
tracksid <- 1
trackitemsid <- 579
amount <- 1
status <- doTransfer(dbcon, tracksid, trackitemsid, amount)
dbExecute(dbcon, "ROLLBACK TRANSACTION")
doTransfer <- function (dbcon, tracksid, trackitemsid, amount)
{
txnFailed = FALSE
dbExecute(dbcon, "BEGIN TRANSACTION")
# Change the price in tracks table
sql <- "UPDATE tracks
SET UnitPrice = UnitPrice + ?
WHERE TrackId = ?"
ps <- dbSendStatement(dbcon, sql,
params = list(amount, tracksid))
if (dbGetRowsAffected(ps) < 1)
txnFailed = TRUE
dbClearResult(ps)
# credit destination account
sql <- "UPDATE invoice_items
SET UnitPrice = UnitPrice + ?
WHERE InvoiceLineId = ?"
ps <- dbSendStatement(dbcon, sql,
params = list(amount, trackitemsid))
if (dbGetRowsAffected(ps) < 1)
txnFailed = TRUE
dbClearResult(ps)
# add accounting transaction to log
sql <- "INSERT INTO journal
(TrackId,amount,change_date)
VALUES (?, ?, date('now'))"
ps <- dbSendStatement(dbcon, sql,
params = list(tracksid, amount))
if (dbGetRowsAffected(ps) < 1)
txnFailed = TRUE
dbClearResult(ps)
# Check if the price is greater than 0
sql <- "SELECT UnitPrice FROM tracks
WHERE TrackId = ?"
ps <- dbSendStatement(dbcon, sql, params = tracksid)
result <- dbFetch(ps)
for(each in result) {
if (each < 0)
txnFailed = TRUE
}
sql <- "SELECT UnitPrice FROM invoice_items
WHERE InvoiceLineId = ?"
ps <- dbSendStatement(dbcon, sql, params = trackitemsid)
result <- dbFetch(ps)
for(each in result) {
if (each < 0)
txnFailed = TRUE
}
# commit transaction if no failure, otherwise rollback
if (txnFailed == TRUE)
dbExecute(dbcon, "ROLLBACK TRANSACTION")
else
dbExecute(dbcon, "COMMIT TRANSACTION")
# return status; TRUE if successful; FALSE if failed
return (!txnFailed)
}
tracksid <- 1
trackitemsid <- 579
amount <- 1
status <- doTransfer(dbcon, tracksid, trackitemsid, amount)
if (status == TRUE) {
cat('Transfer successful')
} else {
cat('Transfer failed')
}
doTransfer <- function (dbcon, tracksid, trackitemsid, amount)
{
txnFailed = FALSE
dbExecute(dbcon, "BEGIN TRANSACTION")
# Change the price in tracks table
sql <- "UPDATE tracks
SET UnitPrice = UnitPrice + ?
WHERE TrackId = ?"
ps <- dbSendStatement(dbcon, sql,
params = list(amount, tracksid))
if (dbGetRowsAffected(ps) < 1)
txnFailed = TRUE
dbClearResult(ps)
# credit destination account
sql <- "UPDATE invoice_items
SET UnitPrice = UnitPrice + ?
WHERE InvoiceLineId = ?"
ps <- dbSendStatement(dbcon, sql,
params = list(amount, trackitemsid))
if (dbGetRowsAffected(ps) < 1)
txnFailed = TRUE
dbClearResult(ps)
# add accounting transaction to log
sql <- "INSERT INTO journal
(TrackId,amount,change_date)
VALUES (?, ?, date('now'))"
ps <- dbSendStatement(dbcon, sql,
params = list(tracksid, amount))
if (dbGetRowsAffected(ps) < 1)
txnFailed = TRUE
dbClearResult(ps)
# Check if the price is greater than 0
sql <- "SELECT UnitPrice FROM tracks
WHERE TrackId = ?"
ps <- dbSendStatement(dbcon, sql, params = tracksid)
result <- dbFetch(ps)
for(each in result$UnitPrice) {
if (each < 0)
txnFailed = TRUE
}
sql <- "SELECT UnitPrice FROM invoice_items
WHERE InvoiceLineId = ?"
ps <- dbSendStatement(dbcon, sql, params = trackitemsid)
result <- dbFetch(ps)
for(each in result$UnitPrice) {
if (each < 0)
txnFailed = TRUE
}
# commit transaction if no failure, otherwise rollback
if (txnFailed == TRUE)
dbExecute(dbcon, "ROLLBACK TRANSACTION")
else
dbExecute(dbcon, "COMMIT TRANSACTION")
# return status; TRUE if successful; FALSE if failed
return (!txnFailed)
}
tracksid <- 1
trackitemsid <- 579
amount <- 1
status <- doTransfer(dbcon, tracksid, trackitemsid, amount)
if (status == TRUE) {
cat('Transfer successful')
} else {
cat('Transfer failed')
}
doTransfer <- function (dbcon, tracksid, trackitemsid, amount)
{
txnFailed = FALSE
dbExecute(dbcon, "BEGIN TRANSACTION")
# Change the price in tracks table
sql <- "UPDATE tracks
SET UnitPrice = UnitPrice + ?
WHERE TrackId = ?"
ps <- dbSendStatement(dbcon, sql,
params = list(amount, tracksid))
if (dbGetRowsAffected(ps) < 1)
txnFailed = TRUE
dbClearResult(ps)
# credit destination account
sql <- "UPDATE invoice_items
SET UnitPrice = UnitPrice + ?
WHERE InvoiceLineId = ?"
ps <- dbSendStatement(dbcon, sql,
params = list(amount, trackitemsid))
if (dbGetRowsAffected(ps) < 1)
txnFailed = TRUE
dbClearResult(ps)
# add accounting transaction to log
sql <- "INSERT INTO journal
(TrackId,amount,change_date)
VALUES (?, ?, date('now'))"
ps <- dbSendStatement(dbcon, sql,
params = list(tracksid, amount))
if (dbGetRowsAffected(ps) < 1)
txnFailed = TRUE
dbClearResult(ps)
# Check if the price is greater than 0
sql <- "SELECT UnitPrice FROM tracks
WHERE TrackId = ?"
ps <- dbSendStatement(dbcon, sql, params = tracksid)
result <- dbFetch(ps)
for(each in result$UnitPrice) {
if (each < 0)
txnFailed = TRUE
}
dbClearResult(ps)
sql <- "SELECT UnitPrice FROM invoice_items
WHERE InvoiceLineId = ?"
ps <- dbSendStatement(dbcon, sql, params = trackitemsid)
result <- dbFetch(ps)
for(each in result$UnitPrice) {
if (each < 0)
txnFailed = TRUE
}
dbClearResult(ps)
# commit transaction if no failure, otherwise rollback
if (txnFailed == TRUE)
dbExecute(dbcon, "ROLLBACK TRANSACTION")
else
dbExecute(dbcon, "COMMIT TRANSACTION")
# return status; TRUE if successful; FALSE if failed
return (!txnFailed)
}
tracksid <- 1
trackitemsid <- 579
amount <- 1
status <- doTransfer(dbcon, tracksid, trackitemsid, amount)
if (status == TRUE) {
cat('Transfer successful')
} else {
cat('Transfer failed')
}
dbGetQuery(dbcon, "SELECT TrackId, Name, UnitPrice FROM tracks WHERE TrackId = 1")
dbGetQuery(dbcon, "SELECT * FROM journal")
dbGetQuery(dbcon, "SELECT InvoiceLineId, TrackId, UnitPrice FROM invoice_items WHERE TrackId = 1")
tracksid <- 1
trackitemsid <- 579
amount <- -4
status <- doTransfer(dbcon, tracksid, trackitemsid, amount)
if (status == TRUE) {
cat('Transfer successful')
} else {
cat('Transfer failed')
}
dbDisconnect(dbcon)
tinytex::install_tinytex()
