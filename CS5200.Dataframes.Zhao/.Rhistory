library(RSQLite)
fpath = ""
dbfile = "MediaDB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
sqlCmd = "SELECT * FROM invoice_items"
rs = dbGetQuery(dbcon, sqlCmd)
head(rs, 3)
library(RSQLite)
fpath = ""
dbfile = "MediaDB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
sqlCmd = "SELECT * FROM invoice_items"
rs = dbGetQuery(dbcon, sqlCmd)
typeof(rs)
library(RSQLite)
fpath = ""
dbfile = "MediaDB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
sqlCmd = "SELECT * FROM invoice_items"
rs = dbGetQuery(dbcon, sqlCmd)
head(rs)
library(RSQLite)
fpath = ""
dbfile = "MediaDB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
sqlCmd = "SELECT * FROM invoice_items"
rs = dbGetQuery(dbcon, sqlCmd)
head(rs)
rs$ItemPrice <- rs$UnitPrice * rs$Quantity
head(rs)
install.packages("sqldf")
library(RSQLite)
library(sqldf)
fpath = ""
dbfile = "MediaDB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
sqlCmd = "SELECT * FROM invoice_items"
rs = dbGetQuery(dbcon, sqlCmd)
rs$ItemPrice <- rs$UnitPrice * rs$Quantity
library(RSQLite)
library(sqldf)
fpath = ""
dbfile = "MediaDB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
sqlCmd = "SELECT * FROM invoice_items"
rs = dbGetQuery(dbcon, sqlCmd)
rs$ItemPrice <- rs$UnitPrice * rs$Quantity
clear
library(RSQLite)
library(sqldf)
fpath = ""
dbfile = "MediaDB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
sqlCmd = "SELECT * FROM invoice_items"
rs = dbGetQuery(dbcon, sqlCmd)
rs$ItemPrice <- rs$UnitPrice * rs$Quantity
library(RSQLite)
library(sqldf)
fpath = ""
dbfile = "MediaDB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
sqlCmd = "SELECT * FROM invoice_items"
rs = dbGetQuery(dbcon, sqlCmd)
rs$ItemPrice <- rs$UnitPrice * rs$Quantity
head(rs)
library(RSQLite)
library(sqldf)
fpath = ""
dbfile = "MediaDB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
sqlCmd = "SELECT * FROM invoice_items"
rs = dbGetQuery(dbcon, sqlCmd)
rs$ItemPrice <- rs$UnitPrice * rs$Quantity
mean(rs$ItemPrice, trim = 0.1)
rs
library(RSQLite)
library(sqldf)
fpath = ""
dbfile = "MediaDB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
sqlCmd = "SELECT * FROM invoice_items"
rs = dbGetQuery(dbcon, sqlCmd)
rs$ItemPrice <- rs$UnitPrice * rs$Quantity
mean(rs$ItemPrice, trim = 0.1)
head(rs)
library(RSQLite)
library(sqldf)
fpath = ""
dbfile = "MediaDB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
sqlCmd = "SELECT * FROM invoice_items"
rs = dbGetQuery(dbcon, sqlCmd)
rs$ItemPrice <- rs$UnitPrice * rs$Quantity
mean(rs$ItemPrice, trim = 0.1)
rs
library(RSQLite)
library(sqldf)
fpath = ""
dbfile = "MediaDB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
sqlCmd = "SELECT * FROM invoice_items"
rs = dbGetQuery(dbcon, sqlCmd)
rs$ItemPrice <- rs$UnitPrice * rs$Quantity
round(mean(rs$ItemPrice, trim = 0.1), 2)
round
library(RSQLite)
fpath = ""
dbfile = "MediaDB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
sqlCmd = "SELECT * FROM invoice_items"
rs = dbGetQuery(dbcon, sqlCmd)
rs$ItemPrice <- rs$UnitPrice * rs$Quantity
round(mean(rs$ItemPrice, trim = 0.1), 2)
round
head(rs)
library(sqldf)
rs2 <- sqldf("SELECT InvoiceId, sum(ItemPrice) as totalPrice, count(Quantity) as itemNumber
FROM rs
GROUP BY InvoiceId;)
library(sqldf)
rs2 <- sqldf("SELECT InvoiceId, sum(ItemPrice) as totalPrice, count(Quantity) as itemNumber
FROM rs
GROUP BY InvoiceId;")
library(sqldf)
rs2 <- sqldf("SELECT InvoiceId, sum(ItemPrice) as totalPrice, count(Quantity) as itemNumber
FROM rs
GROUP BY InvoiceId;")
rs
library(sqldf)
rs2 <- sqldf("SELECT InvoiceId, sum(ItemPrice) as totalPrice, count(Quantity) as itemNumber
FROM rs
GROUP BY InvoiceId;")
rs2
ggplot(data=rs2, aes(x=itemNumber, y=totalPrice, color=InvoiceId)) + geom_point(alpha=0.8, size=3)
library(ggplot2)
install.packages(library(ggplot2))
library(ggplot2)
install.packages(ggplot2)
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot(data=rs2, aes(x=itemNumber, y=totalPrice, color=InvoiceId)) + geom_point(alpha=0.8, size=3)
library(ggplot2)
ggplot(data=rs2, aes(x=itemNumber, y=totalPrice, color=InvoiceId)) + geom_line(alpha=0.8, size=3)
library(ggplot2)
ggplot(rs2, aes(x=itemNumber, y=totalPrice)) + geom_line()
library(sqldf)
rs2 <- sqldf("SELECT InvoiceId, sum(ItemPrice) as totalPrice, count(Quantity) as itemNumber
FROM rs
GROUP BY InvoiceId;")
rs2
library(ggplot2)
ggplot(rs2, aes(x=itemNumber, y=totalPrice)) + geom_line()
library(ggplot2)
ggplot(data = rs2, aes(x=itemNumber, y=totalPrice)) + geom_line()
result <- sqldf("SELECT InvoiceId, SUM(ItemPrice), COUNT(*)
FROM rs
GROUP BY InvoiceId")
result <- sqldf("SELECT InvoiceId, SUM(ItemPrice), COUNT(*)
FROM rs
GROUP BY InvoiceId")
result
result = tryCatch({
query <- "SELECT DiscPrice FROM invoices"
dbExecute(dbcon, query)
}, error = function(e){
# If DiscPrice column not exist, add it.
alter <- "ALTER TABLE invoices
ADD COLUMN DiscPrice
NUMERIC(10, 2);"
dbExecute(dbcon, alter)
}, finally = {
# update values in DiscPrice
update <- "UPDATE invoices
SET DiscPrice =
CASE
WHEN InvoiceId IN
(SELECT InvoiceId as invId
FROM invoice_items
GROUP BY invId HAVING COUNT(quantity) > 5)
THEN total * 0.9
ELSE total
END;"
dbExecute(dbcon, update)
})
query <- "SELECT InvoiceId, Total, DiscPrice FROM invoices LIMIT 20;"
res <- dbGetQuery(dbcon, query)
head(res)
query <- "SELECT InvoiceId, Total, DiscPrice FROM invoices LIMIT 20;"
res <- dbGetQuery(dbcon, query)
res
query <- "SELECT InvoiceId, Total, DiscPrice FROM invoices;"
res <- dbGetQuery(dbcon, query)
res
query <- "SELECT InvoiceId, Total, DiscPrice FROM invoices;"
res <- dbGetQuery(dbcon, query)
res
query <- "SELECT * FROM invoices;"
res <- dbGetQuery(dbcon, query)
res
library(ggplot2)
ggplot(data = rs2, aes(x=factor(itemNumber), y=totalPrice)) + geom_line()
library(ggplot2)
ggplot(df, aes(x = factor(itemNumber), y = totalPrice)) +
geom_bar(stat = "summary", fun = "mean")
library(ggplot2)
ggplot(rs2, aes(x = factor(itemNumber), y = totalPrice)) +
geom_bar(stat = "summary", fun = "mean")
#ggplot(data = rs2, aes(x=factor(itemNumber), y=totalPrice)) + geom_line()
library(ggplot2)
ggplot(rs2, aes(x = factor(itemNumber), y = totalPrice)) +
geom_line(stat = "summary", fun = "mean")
#ggplot(data = rs2, aes(x=factor(itemNumber), y=totalPrice)) + geom_line()
library(ggplot2)
ggplot(rs2, aes(x = factor(itemNumber), y = totalPrice)) +
geom_line(stat = "summary", fun = "mean")
#ggplot(data = rs2, aes(x=factor(itemNumber), y=totalPrice)) + geom_line()
library(ggplot2)
ggplot(rs2, aes(x = factor(itemNumber), y = totalPrice)) +
geom_bar(stat = "summary", fun = "mean")
#ggplot(data = rs2, aes(x=factor(itemNumber), y=totalPrice)) + geom_line()
library(ggplot2)
ggplot(rs2, aes(x = factor(itemNumber), y = totalPrice)) +
geom_line(stat = "summary", fun = "mean")
#ggplot(data = rs2, aes(x=factor(itemNumber), y=totalPrice)) + geom_line()
library(ggplot2)
ggplot(rs2, aes(x = factor(itemNumber), y = totalPrice)) +
geom_line()
#ggplot(data = rs2, aes(x=factor(itemNumber), y=totalPrice)) + geom_line()
library(ggplot2)
ggplot(rs2, aes(x = factor(itemNumber), y = totalPrice)) +
geom_line(stat = "summary", fun = "mean")
#ggplot(data = rs2, aes(x=factor(itemNumber), y=totalPrice)) + geom_line()
library(ggplot2)
ggplot(rs2, aes(x = factor(itemNumber), y = totalPrice)) +
geom_line(yintercept = mean(rs2$totalPrice, na.rm=TRUE))
#ggplot(data = rs2, aes(x=factor(itemNumber), y=totalPrice)) + geom_line()
library(ggplot2)
ggplot(data = rs2, aes(x = itemNumber, y = totalPrice)) +
stat_summary(geom = "line", fun.y = mean)
#ggplot(data = rs2, aes(x=factor(itemNumber), y=totalPrice)) + geom_line()
library(ggplot2)
ggplot(data = rs2, aes(x = itemNumber, y = averagePrice)) +
stat_summary(geom = "line", fun.y = mean)
library(ggplot2)
ggplot(data = rs2, aes(x = itemNumber, y = totalPrice)) +
stat_summary(geom = "line", fun.y = mean) + xlab(item number) + ylab(average price)
library(ggplot2)
ggplot(data = rs2, aes(x = itemNumber, y = totalPrice)) +
stat_summary(geom = "line", fun.y = mean) + xlab("item number") + ylab("average price")
library(ggplot2)
ggplot(data = rs2, aes(x = itemNumber, y = totalPrice)) +
stat_summary(geom = "line", fun.y = mean) + xlab("item number") + ylab("average price") + geom_point()
library(ggplot2)
ggplot(data = rs2, aes(x = itemNumber, y = totalPrice)) +
stat_summary(geom = "line", fun.y = mean) + xlab("item number") + ylab("average price")
library(RSQLite)
fpath = ""
dbfile = "MediaDB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
sqlCmd = "SELECT * FROM invoice_items"
rs = dbGetQuery(dbcon, sqlCmd)
rs$ItemPrice <- rs$UnitPrice * rs$Quantity
round(mean(rs$ItemPrice, trim = 0.1), 2)
round
head(rs)
library(sqldf)
rs2 <- sqldf("SELECT InvoiceId, sum(ItemPrice) as totalPrice, count(Quantity) as itemNumber
FROM rs
GROUP BY InvoiceId;")
rs2
library(ggplot2)
ggplot(data = rs2, aes(x = itemNumber, y = totalPrice)) +
stat_summary(geom = "line", fun.y = mean) + xlab("item number") + ylab("average price")
result = tryCatch({
query <- "SELECT DiscPrice FROM invoices"
dbExecute(dbcon, query)
}, error = function(e){
# If DiscPrice column not exist, add it.
alter <- "ALTER TABLE invoices
ADD COLUMN DiscPrice
NUMERIC(10, 2);"
dbExecute(dbcon, alter)
}, finally = {
# update values in DiscPrice
update <- "UPDATE invoices
SET DiscPrice =
CASE
WHEN InvoiceId IN
(SELECT InvoiceId as invId
FROM invoice_items
GROUP BY invId HAVING COUNT(quantity) > 10)
THEN total * 0.9
ELSE total
END;"
dbExecute(dbcon, update)
})
query <- "SELECT * FROM invoices;"
res <- dbGetQuery(dbcon, query)
res
dbDisconnect(dbcon)
library(RSQLite)
fpath = ""
dbfile = "MediaDB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
sqlCmd = "SELECT * FROM invoice_items"
rs = dbGetQuery(dbcon, sqlCmd)
rs$ItemPrice <- rs$UnitPrice * rs$Quantity
round(mean(rs$ItemPrice, trim = 0.1), 2)
round
head(rs)
library(sqldf)
rs2 <- sqldf("SELECT InvoiceId, SUM(ItemPrice) AS totalPrice, SUM(Quantity) AS itemNumber
FROM rs
GROUP BY InvoiceId;")
rs2
library(ggplot2)
ggplot(data = rs2, aes(x = itemNumber, y = totalPrice)) +
stat_summary(geom = "line", fun.y = mean) + xlab("item number") + ylab("average price")
result = tryCatch({
query <- "SELECT DiscPrice FROM invoices"
dbExecute(dbcon, query)
}, error = function(e){
# If DiscPrice column not exist, add it.
alter <- "ALTER TABLE invoices
ADD COLUMN DiscPrice
NUMERIC(10, 2);"
dbExecute(dbcon, alter)
}, finally = {
# update values in DiscPrice
update <- "UPDATE invoices
SET DiscPrice =
CASE
WHEN InvoiceId IN
(SELECT InvoiceId AS invId
FROM invoice_items
GROUP BY invId HAVING SUM(quantity) > 10)
THEN total * 0.9
ELSE total
END;"
dbExecute(dbcon, update)
})
query <- "SELECT * FROM invoices;"
res <- dbGetQuery(dbcon, query)
res
dbDisconnect(dbcon)
